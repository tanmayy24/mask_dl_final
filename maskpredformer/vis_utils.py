# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/99_vis_utils.ipynb.

# %% auto 0
__all__ = ['show_gif', 'show_video_line']

# %% ../nbs/99_vis_utils.ipynb 2
import matplotlib.pyplot as plt
import imageio
import os

# %% ../nbs/99_vis_utils.ipynb 3
# Generate gif from a list of images
def show_gif(prev, true, pred, out_path, vmax=48, vmin=0, cmap='tab20b'):
    def swap_axes(x):
            if len(x.shape) > 3:
                return x.swapaxes(1,2).swapaxes(2,3)
            else: return x

    prev, true, pred = map(swap_axes, [prev, true, pred])
    prev_frames = prev.shape[0]
    frames = prev_frames + true.shape[0]
    images = []
    tmp_path = os.path.join(os.path.dirname(out_path), 'tmp.png')
    for i in range(frames):
        fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(9, 6))
        for t, ax in enumerate(axes):
            if t == 0:
                plt.text(0.3, 1.05, 'ground truth', fontsize=15, color='green', transform=ax.transAxes)
                if i < prev_frames:
                    im = ax.imshow(prev[i], cmap=cmap, vmax=vmax, vmin=vmin)
                else:
                    im = ax.imshow(true[i-frames], cmap=cmap, vmax=vmax, vmin=vmin)
            elif t == 1:
                plt.text(0.2, 1.05, 'predicted frames', fontsize=15, color='red', transform=ax.transAxes)
                if i < prev_frames:
                    im = ax.imshow(prev[i], cmap=cmap, vmax=vmax, vmin=vmin)
                else:
                    im = ax.imshow(pred[i-frames], cmap=cmap, vmax=vmax, vmin=vmin)
            ax.axis('off')
        plt.savefig(tmp_path, bbox_inches='tight', format='png')
        plt.close()
        images.append(imageio.imread(tmp_path))

    plt.close()
    os.remove(tmp_path)

    if out_path is not None:
        if not out_path.endswith('gif'):
            out_path = out_path + '.gif'
        imageio.mimsave(out_path, images)


# %% ../nbs/99_vis_utils.ipynb 4
def show_video_line(data, ncols, vmax=48, vmin=0, cmap='tab20b', cbar=False, format='png', out_path=None):
    fig, axes = plt.subplots(nrows=1, ncols=ncols, figsize=(3.25*ncols, 3))
    plt.subplots_adjust(wspace=0.01, hspace=0)
    images = []
    if ncols == 1:
        im = axes.imshow(data[0], cmap=cmap, vmin=vmin, vmax=vmax)
        images.append(im)
        axes.axis('off')
        im.set_clim(vmin, vmax)
    else:
        for t, ax in enumerate(axes.flat):
            im = ax.imshow(data[t], cmap=cmap, vmin=vmin, vmax=vmax)
            images.append(im)
            ax.axis('off')
            im.set_clim(vmin, vmax)
    if cbar and ncols > 1:
        cbaxes = fig.add_axes([0.9, 0.15, 0.04 / ncols, 0.7]) 
        cbar = fig.colorbar(im, ax=axes.ravel().tolist(), shrink=0.1, cax=cbaxes)

    plt.show()
    if out_path is not None:
        fig.savefig(out_path, format=format, pad_inches=0, bbox_inches='tight')
    plt.close()
